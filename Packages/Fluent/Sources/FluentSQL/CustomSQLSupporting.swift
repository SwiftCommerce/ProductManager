/// Supports mutating SQL before execution using `customSQL(_:)` closures added to `QueryBuilder`.
public protocol CustomSQLSupporting: QuerySupporting { }

/// A custom SQL transformation.
public struct CustomSQL {
    /// Mutates a `SQLQuery`
    public let closure: (inout SQLQuery) -> ()
}

extension DatabaseQuery where Database: CustomSQLSupporting {
    /// Array of custom SQL transformations for this database query.
    public var customSQL: [CustomSQL] {
        get { return extend["custom-sql"] as? [CustomSQL] ?? [] }
        set { extend["custom-sql"] = newValue }
    }
}

extension DatabaseSchema where Database: CustomSQLSupporting {
    /// Array of custom SQL transformations for this database query.
    public var customSQL: [CustomSQL] {
        get { return extend["custom-sql"] as? [CustomSQL] ?? [] }
        set { extend["custom-sql"] = newValue }
    }
}

extension QueryBuilder where Model.Database: CustomSQLSupporting {
    /// Adds a SQL-transforming closure to the `QueryBuilder` that will be
    /// called before the query is executed.
    ///
    /// One or more SQL-transforming closures may be added--they will be run sequentially.
    ///
    /// - parameters:
    ///     - closure: Accepts the `SQLQuery` generated by this query builder.
    ///                Called before the query executes.
    ///                The `SQLQuery` is mutable. Add or remove any custom options.
    ///
    /// - returns: `QueryBuilder` for chaining.
    public func customSQL(_ closure: @escaping (inout SQLQuery) -> ()) -> Self {
        query.customSQL.append(.init(closure: closure))
        return self
    }
}

extension SchemaBuilder where Model.Database: CustomSQLSupporting {
    /// Adds a SQL-transforming closure to the `SchemaBuilder` that will be
    /// called before the query is executed.
    ///
    /// One or more SQL-transforming closures may be added--they will be run sequentially.
    ///
    /// - parameters:
    ///     - closure: Accepts the `SQLQuery` generated by this query builder.
    ///                Called before the query executes.
    ///                The `SQLQuery` is mutable. Add or remove any custom options.
    ///
    /// - returns: `SchemaBuilder` for chaining.
    public func customSQL(_ closure: @escaping (inout SQLQuery) -> ()) -> Self {
        schema.customSQL.append(.init(closure: closure))
        return self
    }
}
